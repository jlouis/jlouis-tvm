%{ Small playtoy language for
   working with function calls

   TODO: add F and Gamma!

}%

%{ ** Prelude ** }%
nat : type.

z : nat.
s : nat -> nat.

%{ ** SYNTAX ** }%

%% Function id's. These are just natural numbers
fid : type.
fid/ : nat -> type.

%% Terms
tm : type.

tm/skip : tm.
tm/semi : tm -> tm -> tm.
tm/fcall : fid -> tm.

%% Function definition lists
defs : type.

defs/z : defs.
defs/s : fid -> tm -> defs -> defs.

%% Programs
pgm : type.

pgm/ : defs -> tm -> pgm.

%{ ** Operational semantics ** }%

%% Function definition lookup.
def-lookup : defs -> fid -> tm -> type.
%mode def-lookup +D +F -T.

def-lookup/hit : def-lookup (defs/s F B _) F B.
def-lookup/miss : def-lookup (defs/s F' _ R) F Q
		   <- def-lookup R F Q.

%% Term evaluation
step : defs -> tm -> tm -> type.

step/skip : step _ (tm/semi tm/skip T) T.
step/semi : step D (tm/semi T T2) (tm/semi T' T2)
	   <- step Defs T T'.
step/fcall : step D (tm/fcall F) B
	    <- def-lookup D F B.

%% Program evaluation
step-pgm : pgm -> pgm -> type.

step-pgm/ : step-pgm (pgm/ Defs T) (pgm/ Defs T')
	   <- step Defs T T'.

%{ ** Type system ** }%

%% Helping type environment for functions
gamma : type.

gamma/z : gamma.
gamma/s : fid -> gamma -> gamma.

gamma-lookup : gamma -> fid -> type.
%mode gamma-lookup +G +F.

gamma-lookup/hit : gamma-lookup (gamma/s F _) F.
gamma-lookup/miss : gamma-lookup (gamma/s F' R) F
		     <- gamma-lookup R F.

%% Welformednesss relation. Defines when a term abides a Gamma-typing.
%%   notated as [ G |- t ]
wf : gamma -> tm -> type.
%mode wf +G +T.

wf/skip : wf _ tm/skip.
wf/semi : wf G (tm/semi T1 T2)
	   <- wf G T1
	   <- wf G T2.
wf/fcall : wf G (tm/fcall F)
	    <- gamma-lookup G F.

%% Wellformedness relation on definitions [ G |- d : G' ]
wf-def : gamma -> defs -> gamma -> type.
%mode wf-def +G +D +G'.

wf-def/z : wf-def G defs/z gamma/z.
wf-def/s : wf-def G (defs/s F T DR) (gamma/s F GR)
	    <- wf G T
	    <- wf-def G DR GR.

%% Wellformedness on programs [ |- P ]

wf-pgm : pgm -> type.

%% TODO: Perhaps we should derive Gamma explicitly. It is fairly easy.
wf-pgm/ : wf-pgm (pgm/ D T)
	   <- ({G : gamma} wf-def G D G)
	   <- ({G : gamma} wf G T).

%{ **** PROPERTIES **** }%

%{ PROGRESS }%
%% Helper. Defines when progress is good for a term.
pgood : defs -> tm -> type.

pgood/v : pgood _ tm/skip.
pgood/s : pgood D T
	   <- step D T T'.

%% Lemma, progress on terms.
progress-tm : wf G T -> wf-def G D G -> pgood D T -> type.
%mode progress-tm +WF +WFD -PG.

%% Helper for progress on programs.
pgood-pgm : pgm -> type.

pgood-pgm/v : pgood-pgm (pgm/ D tm/skip).
pgood-pgm/s : pgood-pgm (pgm/ D T)
	       <- step D T T'.

progress : wf-pgm P -> pgood-pgm P -> type.
%mode progress +WF -PG.

%{ PRESERVATION }%

preservation : wf-pgm P -> step-pgm P P' -> wf-pgm P' -> type.
%mode preservation +WFP +SP -WFP'.

%{ DETERMINISM }%

%% Helper, syntactic equality on terms and programs.
tm-eq : tm -> tm -> type.
tm-eq/ : tm-eq T T.
pgm-eq : pgm -> pgm -> type.
pgm-eq/ : pgm-eq P P.


det : wf-pgm P -> step-pgm P P' -> step-pgm P P'' -> pgm-eq P' P'' -> type.
%mode det +WFP +SP1 +SP2 -EQ.

%{ SOUNDNESS }%

soundness : wf-pgm P -> step-pgm P P' -> pgood-pgm P' -> type.
%mode soundness +WFP +SP -PG.

