%{

The VM pre0 code is an attempt at formalizing the simple basics of a functional
VM language

}%

%{

Syntax

}%

tm : type.
fname : type.

nbind : type.
defs : type.

nbind/z : defs -> nbind.
nbind/s : (fname -> nbind) -> nbind.

defs/z : tm -> defs.
defs/s : fname -> (tm -> tm) -> defs -> defs.

tm/nat : nat -> tm.
tm/plus : tm -> tm -> tm.
tm/let : tm -> (tm -> tm) -> tm.
tm/fcall : fname -> tm -> tm.
tm/letrec : nbind -> tm.

%{ Static Semantics }%

value : tm -> type.
value-nbind : nbind -> tm -> type.
value-defs : defs -> tm -> type.

value/nat : value (tm/nat _).

%{
value-decls/s : value-decls (decls/s D _)
		 <- value-decls D.

value-decls/z : value-decls (decls/z D)
		 <- value-defs D.

}%

value-nbind/z : value-nbind (nbind/z D) T
		 <- value-defs D T.

value-nbind/s : value-nbind (nbind/s [f] D f) T
		 <- ({f : fname} value-nbind (D f) T).


value-defs/s : value-defs (defs/s _ _ D) T
		<- value-defs D T.

value-defs/z : value-defs (defs/z T) T
		<- value T.

%{ Small-step relation }%

func-map : fname -> (tm -> tm) -> type.

pctx : (tm -> tm) -> type.

pctx/plus-1 : pctx ([x] tm/plus x _).

pctx/plus-2 : pctx ([x] tm/plus V x)
	       <- value V.

pctx/let : pctx ([x] tm/let x _).

pctx/fcall : pctx ([x] tm/fcall _ x).



step : tm -> tm -> type.
bind-n : nbind -> nbind -> type.
bind-defs : defs -> defs -> type.

bind-n/z : bind-n (nbind/z D) (nbind/z D')
	    <- bind-defs D D'.

bind-n/s : bind-n (nbind/s [f] D f) (nbind/s [f] D' f)
	    <- ({f : fname} bind-n (D f) (D' f)).

bind-defs/z : bind-defs (defs/z T) (defs/z T')
	       <- step T T'.

bind-defs/s : bind-defs (defs/s F T D) (defs/s F T D')
	       <- (func-map F T -> bind-defs D D').

step/pctx : step (EC E) (EC E')
	     <- pctx EC
	     <- step E E'.

step/nat : step (tm/nat N) (tm/nat N).

step/let : step (tm/let V B) (B V)
	    <- value V.

step/fcall : step (tm/fcall FN V) (B V)
	      <- value V
	      <- func-map FN B.

step/letrec-1 : step (tm/letrec B) V
		 <- value-nbind B V.

step/letret-2 : step (tm/letrec B) (tm/letrec B')
		 <- bind-n B B'.
