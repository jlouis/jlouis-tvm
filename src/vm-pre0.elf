%{

The VM pre0 code is an attempt at formalizing the simple basics of a functional
VM language


TODO list:

- Trace execution of the infinite loop and find the problem.
- Rewrite Decls to contain a typing relation and check it
  such that each declaration has EXACTLY one definition.

}%

%{

Syntax

}%

%{ Type system }%

tp : type. %name tp TP.

tp/nat : tp.
tp/bool : tp.

tp-list : type.

tp-list/z : tp-list. %name tp-list TPL.
tp-list/s : tp -> tp-list -> tp-list.

tp-sig : type.

tp-sig/z : tp-sig.
tp-sig/s : tp-list -> tp -> tp-sig -> tp-sig.

%{ Language syntax }%
tm : tp -> type. %name tm T.
%% Function names, with intrinsicly defined parameter and return types.
fname : tp-list -> tp -> type. %name fname F.
decls : tp-sig -> type.
defs : tp-sig -> type. %% Type of letrec body.
fpar : tp-list -> tp -> type. %% Function parameters.
tm-list : tp-list -> type. %% List of terms

decls/z : decls tp-sig/z.
decls/s : decls TSig -> fname TS T -> decls (tp-sig/s TS T TSig).

defs/z : defs tp-sig/z.
defs/s : defs TSig -> fpar TS T -> defs (tp-sig/s TS T TSig).

fpar/z : tm T -> fpar tp-list/z T.
fpar/s : (tm T -> fpar TS T') -> fpar (tp-list/s T TS) T'.

lr-bind : tp-sig -> tp-sig -> tp -> type.

lr-bind/s : (fname TS T -> lr-bind TSig' TSig TMT)
	     -> lr-bind TSig' (tp-sig/s TS T TSig ) TMT.
lr-bind/z : decls TSig' -> defs TSig'
			-> tm T -> lr-bind TSig' tp-sig/z T.

tm/nat : nat -> tm tp/nat.
tm/bool : nat -> tm tp/bool.
tm/plus : tm tp/nat -> tm tp/nat -> tm tp/nat.
tm/mone : tm tp/nat -> tm tp/nat -> tm tp/nat.
tm/ifte : tm tp/bool -> tm T -> tm T -> tm T.
tm/let : tm T -> (tm T -> tm T') -> tm T'.
tm/fcall : fname TS T -> tm-list TS -> tm T.
tm/letrec : lr-bind TSig TSig T -> tm T.
tm/isz : tm tp/nat -> tm tp/bool.

nat    = tm/nat.
plus   = tm/plus.
mone   = tm/mone.
ifte   = tm/ifte.
let    = tm/let.
fcall  = tm/fcall.
letrec = tm/letrec.
isz    = tm/isz.


true = tm/bool 1.
false = tm/bool 0.

tm-list/z : tm-list tp-list/z.
tm-list/s : tm T -> tm-list TS -> tm-list (tp-list/s T TS).

nil = tm-list/z.
cons = tm-list/s.


%{ Static Semantics }%
value : tm T -> type.
%mode value +T.

value/nat : value (tm/nat _).


value-lr-bind : lr-bind _ _ T -> tm T -> type.

%mode value-lr-bind +LRB -T.

value-lr-bind/z : value-lr-bind (lr-bind/z _ _ T) T
		   <- value T.

value-lr-bind/s : value-lr-bind (lr-bind/s [f] D f) T
		   <- ({f} value-lr-bind (D f) T).

%{ Small-step relation }%

%% Mapping from function names into the body of the function.
func-map : fname TS T -> fpar TS T -> type.
%mode func-map +F -FP.

%% Applying a function to its parameters.
func-apply : fpar TS T -> tm-list TS -> tm T -> type.
%mode func-apply +FP +TML -T.

func-apply/z : func-apply (fpar/z T) tm-list/z T.

func-apply/s : func-apply (fpar/s [x] E x) (tm-list/s T R) T'
		<- func-apply (E T) R T'.

%% Evaluation context for terms.
step : tm T -> tm T -> type.
%mode step +T -T'.

step-lr-bind : lr-bind TS1 TS2 T -> lr-bind TS1 TS2 T -> type.
%mode step-lr-bind +B -B'.

step-decls+defs : decls TS -> defs TS -> tm T -> tm T -> type.
%mode step-decls+defs +D +De +T -T'.

step-decls+defs/z : step-decls+defs decls/z defs/z T T'
		     <- step T T'.

step-decls+defs/s : step-decls+defs (decls/s RDecls F) (defs/s RDefs FB) T T'
		     <- (func-map F FB -> step-decls+defs RDecls RDefs T T').

step-lr-bind/z : step-lr-bind (lr-bind/z Decls Defs T) (lr-bind/z Decls Defs T')
		  <- step-decls+defs Decls Defs T T'.

step-lr-bind/s : step-lr-bind (lr-bind/s [f : fname TS T] D f) (lr-bind/s [f] D' f)
		  <- ({f : fname TS T} step-lr-bind (D f) (D' f)).

step/isz : step (tm/isz E) (tm/isz E')
	    <- step E E'.

step/let : step (tm/let E B) (tm/let E' B)
	    <- step E E'.

step/ifte-tst : step (tm/ifte E K1 K2) (tm/ifte E' K1 K2)
		 <- step E E'.

step/plus-1 : step (tm/plus E K) (tm/plus E' K)
	       <- step E E'.

step/plus-2 : step (tm/plus V E) (tm/plus V E')
	       <- value V
	       <- step E E'.

step/mone-1 : step (tm/mone E K) (tm/mone E' K)
	       <- step E E'.

step/mone-2 : step (tm/mone V E) (tm/mone V E')
	       <- value V
	       <- step E E'.

step/plus : step (tm/plus (tm/nat N1) (tm/nat N2)) (tm/nat N3)
	     <- nat-plus N1 N2 N3.


step/mone : step (tm/mone (tm/nat N1) (tm/nat N2)) (tm/nat N3)
	     <- nat-mone N1 N2 N3.


step/if-true : step (tm/ifte (tm/bool (s _)) E1 E2) E1.

step/if-false : step (tm/ifte (tm/bool z) E1 E2) E2.

step/let : step (tm/let V B) (B V)
	    <- value V.

step/isz-t : step (tm/isz (tm/nat 0)) (tm/bool 1).
step/isz-f : step (tm/isz (tm/nat (s _))) (tm/bool 0).

step/fcall-apply : step (tm/fcall FN VS) E
		    <- func-map FN B
		    <- func-apply B VS E.

step/letrec-1 : step (tm/letrec B) V
		 <- value-lr-bind B V.

step/letrec-2 : step (tm/letrec B) (tm/letrec B')
		 <- step-lr-bind B B'.


%{
%{

Iterated step relations

}%

steps : tm T -> tm T -> type. %name steps Dsteps.
%mode steps +T -T'.

steps/0 : steps T T.

steps/s : steps T T''
	   <- step T T'
	   <- steps T' T''.


steps-to : tm T -> tm T -> type. %name steps-to Dsteps-to.
%mode steps-to +T -V.

steps-to/i : steps-to T V
	      <- steps T V
	      <- value V.

%{

Query tests of the system

}%


%% Test if-then-else
ifte-test1 = (ifte (tm/bool 0) (tm/nat 1) (tm/nat 2)).
ifte-test2 = (ifte (tm/bool 3) (tm/nat 1) (tm/nat 2)).

%query 1 1 (step ifte-test1 (tm/nat 2)).
%query 1 1 (step ifte-test2 (tm/nat 1)).

%% Test isz
%query 1 1 (step (isz (tm/nat 3)) false).
%query 0 1 (step (isz (tm/nat 3)) true).
%query 1 1 (step (isz (tm/nat 0)) true).
%query 0 1 (step (isz (tm/nat 0)) false).

%query 1 1 (step (mone (tm/nat 3) (tm/nat 1)) (tm/nat 2)).

letrec-test1 = letrec (decls/z (defs/z (tm/nat 0))).
letrec-test2 = letrec (decls/z (defs/z (plus (tm/nat 1) (tm/nat 2)))).
letrec-test3 = letrec (decls/s [g : fname (tp-list/s tp/nat tp-list/z) tp/nat] decls/z
			 (defs/s g (fpar/s [x]
				      (fpar/z (plus x (tm/nat 1))))
			    (defs/z (fcall g (cons (tm/nat 2) nil))))).
letrec-test4 = letrec (decls/s [g : fname (tp-list/s tp/nat tp-list/z) tp/nat] decls/z
			 (defs/s g (fpar/s [x]
				      (fpar/z (plus x (tm/nat 1))))
			    (defs/z (tm/nat 2)))).

%% 3rd test is to include something which we call.

%query 1 2 (steps-to letrec-test1 (tm/nat 0)).
%query 1 2 (steps-to letrec-test2 (tm/nat 3)).
%query 0 3 (steps-to letrec-test2 (tm/nat 0)).
%query 1 2 (steps-to letrec-test4 X).
%query 1 2 (steps-to letrec-test3 X). %% This one is wrong pt.

%{

So the problem is that the system, when calling functions is not
deterministic. There must be some rule somewhere which makes it go wrong.

Ways to attack:

- Trace.traceAll -- Look at what happens when it returns from the
  first solution.

}%

gauss = [n] (letrec (decls/s [g : fname (tp-list/s tp/nat tp-list/z) tp/nat] decls/z
		      (defs/s g (fpar/s [x]
				  (fpar/z (ifte (isz x)
					     (tm/nat 0)
					     (plus
						x
						(fcall g (cons (mone x (tm/nat 1)) nil))))))
			 (defs/z (fcall g (cons n nil)))))).

%%query 1 5 (steps-to (gauss (tm/nat 0)) X).
%%query 0 1 (steps-to (gauss (tm/nat 3)) (tm/nat 1)).

%{

even = [n] (letrec (decls/s [even : fname (tp-list/s tp/nat tp-list/z) tp/nat]
		       decls/s [odd  : fname (tp-list/s tp/nat tp-list/z) tp/nat]
			 (decls/z
			    (defs/s even (fpar/s [x]
					    (fpar/z (ifte (isz x)
						       (tm/nat 1)
						       (fcall odd (cons (mone x (tm/nat 1)) nil)))))
			    (defs/s odd (fpar/s [x]
					   (fpar/z (ifte (isz (mone x (tm/nat 1)))
						      (tm/nat 0)
						      (fcall even (cons (mone x (tm/nat 1)) nil)))))
			    (defs/z (fcall even (cons n nil)))))))).

%query 1 1 (steps-to (even (tm/nat 0)) (tm/nat 1)).
%query 1 1 (steps-to (even (tm/nat 1)) (tm/nat 0)).
%query 1 1 (steps-to (even (tm/nat 2)) (tm/nat 1)).
%query 1 1 (steps-to (even (tm/nat 3)) (tm/nat 0)).

}%
}%