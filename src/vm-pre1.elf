%{

This is version (s z) of our pre-vm version.

Jesper Louis Andersen, 2009

}%



%{

******** Type System ********

}%

%% Primitive types
tp : type.

tp/nat : tp.
tp/bool : tp.

%% Lists of primitive types
tp-list : type.

tp-list/nil : tp-list.
tp-list/cons : tp -> tp-list -> tp-list.

%% Function types
fun-tp : type.
%% There is only way to introduce a function type.
fun-tp/ : tp-list -> tp -> fun-tp.

fun-tp-list : type.
fun-tp-list/nil : fun-tp-list.
fun-tp-list/cons : fun-tp -> fun-tp-list -> fun-tp-list.

%{

******** Syntax ********

}%

%{ Introduction of function bundles.

   Function names
   Function bundles

   TODO: DOCUMENT FOR GODS SAKE!
}%

fname : fun-tp -> type.
fbundle : fun-tp-list -> type.

f-hd : fbundle (fun-tp-list/cons FT FTL) -> fname FT.
f-tl : fbundle (fun-tp-list/cons FT FTL) -> fbundle FTL.



tm : tp -> type.
tm-list : tp-list -> type.

tm-list/nil : tm-list tp-list/nil.
tm-list/cons : tm T -> tm-list TL -> tm-list (tp-list/cons T TL).


fun-def : fun-tp -> type.

fun-def/body : tm T -> (fun-def (fun-tp/ tp-list/nil T)).
fun-def/parm : (tm T0 -> fun-def (fun-tp/ TL T)) -> fun-def (fun-tp/ (tp-list/cons T0 TL) T).

fun-def-list : fun-tp-list -> type.

fun-def-list/nil : fun-def-list fun-tp-list/nil.
fun-def-list/cons : fun-def FT -> fun-def-list FTL -> fun-def-list (fun-tp-list/cons FT FTL).

fun-list : fun-tp-list -> type.

fun-list/nil : fun-list fun-tp-list/nil.
fun-list/cons : fun-def FT -> fun-list FTL -> fun-list (fun-tp-list/cons FT FTL).


%{ Primitive constants }%
tm/cst-n : nat -> tm tp/nat.
tm/cst-b : nat -> tm tp/bool.
tm/plus  : tm tp/nat -> tm tp/nat -> tm tp/nat.


tm/call : fname (fun-tp/ TL T) -> tm-list TL -> tm T.
tm/letrec : (fbundle FTL -> fun-def-list FTL)
               -> (fbundle FTL -> tm T) -> tm T.



%{

******** STATIC SEMANTICS ********

}%

value : tm T -> type.


value/cst-n : value (tm/cst-n X).

value/cst-n : value (tm/cst-b X).



pctx : (tm T -> tm T') -> type.

pctx/plus-1 : pctx ([x] tm/plus x _).

pctx/plus-2 : pctx ([x] tm/plus V x)
	       <- value V.


step : tm T -> tm T -> type.

%% Binding construct for function-bundles
fb-bind : fbundle FTL -> fun-def-list FTL -> type.
fbundle-lookup : fname FT -> fun-def-list (fun-tp-list/cons FT _) -> type.

fbundle-lookup/ctx-hit : fbundle-lookup (f-hd FB) FL
			  <- fb-bind FB FL.

fbundle-lookup/miss : fbundle-lookup (f-hd (f-tl FB)) R
		       <- fbundle-lookup (f-hd FB) (fun-def-list/cons _ R).


fun-apply : fun-def (fun-tp/ TL T) -> tm-list TL -> tm T -> type.

step/ctx : step (EC E) (EC E')
	    <- pctx EC
	    <- step E E'.

step/plus : step (tm/plus (tm/cst-n N1) (tm/cst-n N2)) (tm/cst-n N3)
	     <- nat-plus N1 N2 N3.

step/letrec : step (tm/letrec ([fb] Defs fb) ([fb] Body fb)) E
	       <- ({fb} fb-bind fb (Defs fb) ->
			  step (Body fb) E).

step/call : step (tm/call FN EL) E
	     <- fbundle-lookup FN (fun-def-list/cons FDef _)
	     <- fun-apply FDef EL E.

