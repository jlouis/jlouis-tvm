%{

********* PROPERTIES *********

}%


%block det-1 : some {FTL} {Defs : fbundle FTL -> fun-def-list FTL}
	       block {fb : fbundle FTL} {fbind : fb-bind fb (Defs fb)}.

%worlds (det-1) (fbundle-lookup _ _) (fun-apply _ _ _) (fb-bind _ _).

%{

**** MAPS ****

}%
fb-bind-map : {FB : fbundle FTL} fb-bind FB Defs -> type.
%mode fb-bind-map +F -B.

%{ To appease Twelfs splitter }%
fb-bind-map0 : fb-bind-map fbundle0 fb-bind0.


fdef-eq : fun-def FT -> fun-def FT -> type.

fdef-eq/refl : fdef-eq FD FD.

fbundle-lookup-unique : fbundle-lookup FB (fun-def-list/cons FD1 _)
		     -> fbundle-lookup FB (fun-def-list/cons FD2 _) -> fdef-eq FD1 FD2 -> type.
%mode fbundle-lookup-unique +FB1 +FB2 -FDEF.

- : fbundle-lookup-unique FB1 FB2 fdef-eq/refl.


function-apply-unique : fdef-eq FD1 FD2 -> fun-apply FD1 TL E1 -> fun-apply FD2 TL E2
			 -> tm-eq E1 E2 -> type.
%mode function-apply-unique +EQ +FA1 +FA2 -TMEQ.

- : function-apply-unique fdef-eq/refl fun-apply/body fun-apply/body tm-eq/refl.

- : function-apply-unique fdef-eq/refl (fun-apply/parm FA1) (fun-apply/parm FA2) Q
     <- function-apply-unique fdef-eq/refl FA1 FA2 Q.

%{ General relation capturing the basics of type progress }%

progress-good : tm T -> type.

progress-good/value : progress-good V
		       <- value V.

progress-good/step : progress-good E
		      <- step E E'.




can-fbundle-lookup : {FB : fbundle+ (fun-tp-list/cons FT FTL)}
		      fbundle-lookup FB FDL -> type.

%mode can-fbundle-lookup +FB -FL.

- : can-fbundle-lookup (f-tl/z FB) (fbundle-lookup/ctx-hit FBBind)
     <- fb-bind-map FB FBBind.

- : can-fbundle-lookup (f-tl/s FB) (fbundle-lookup/dig Q)
     <- can-fbundle-lookup FB Q.


can-fun-apply : {RL : reg-list TL} fun-apply Parms RL T -> type.
%mode +{T : tp} +{TL : tp-list} +{Parms}
      -{E : tm T}
      +{RL : reg-list TL}
      -{FA : fun-apply Parms RL E}
      can-fun-apply RL FA.

- : can-fun-apply reg-list/nil fun-apply/body.

- : can-fun-apply (reg-list/cons E EL) (fun-apply/parm Q)
     <- can-fun-apply EL Q.

%{
progress-if : progress-good B -> progress-good (tm/if B T F) -> type.
%mode +{A : tp} +{B : tm tp/bool} +{T : tm A} +{F : tm A}
      +{PG : progress-good B}
      -{PGG : progress-good (tm/if B T F)}
      progress-if PG PGG.

- : progress-if (progress-good/step SP) (progress-good/step (step/if-1 SP)).

- : progress-if (progress-good/value VP) (progress-good/step step/if-t).

- : progress-if (progress-good/value VP) (progress-good/step step/if-f).
}%

progress-let : progress-good T -> progress-good (tm/let T B) -> type.
%mode +{A : tp} +{B : tp} +{T : tm A} +{Bdy : reg A -> tm B}
      +{TG : progress-good T}
      -{BG : progress-good (tm/let T Bdy)}
      progress-let TG BG.

- : progress-let (progress-good/value VP) (progress-good/step (step/let-a VP)).

- : progress-let (progress-good/step SP) (progress-good/step (step/let-s SP)).


progress-letrec : ({F : fbundle FTL} {FB : fb-bind F (Defs F)}
		     progress-good (Body F))
		   -> progress-good (tm/letrec Defs ([fb] Body fb)) -> type.
%mode +{FTL} +{T} +{F : fbundle FTL}
      +{Body : fbundle FTL -> tm T}
      +{Defs : fbundle FTL -> fun-def-list FTL}
      +{PG : {F} {FB} progress-good (Body F)}
      -{PGG : progress-good (tm/letrec Defs Body)}
      progress-letrec PG PGG.

- : progress-letrec ([fb] [fbind] progress-good/value VP)
     (progress-good/step (step/letrec-v VP)).

- : progress-letrec ([fb] [fbind] progress-good/step (SP fb fbind))
     (progress-good/step (step/letrec-s ([fb] [fbind] SP fb fbind))).

%{

**** MAIN PROGRESS LEMMA ****

}%

progress : {E : tm T} progress-good E -> type.
%mode progress +E -PG.


-/c : progress (tm/reg _) (progress-good/value value/reg).

-/plus : progress (tm/plus (reg/cst-n N1) (reg/cst-n N2))
	     (progress-good/step (step/plus CNP))
	  <- can-nat-plus N1 N2 CNP.

-/if-t : progress (tm/if (reg/cst-b z) T F) (progress-good/step step/if-f).

-/if-f : progress (tm/if (reg/cst-b (s _)) T F) (progress-good/step step/if-t).

-/let : progress (tm/let T B) Q
	 <- progress T PG
	 <- progress-let PG Q.

-/lr : progress (tm/letrec (Defs : fbundle FTL -> fun-def-list FTL) Body) Q
	<- ({fb : fbundle FTL} {fbind : fb-bind fb (Defs fb)}
	      fb-bind-map fb fbind ->
	        progress (Body fb) (PG fb fbind))
	<- progress-letrec PG Q.

-/call : progress (tm/br (f-hd FB) EL)
	       (progress-good/step (step/call CFA CFL))
	  <- can-fbundle-lookup FB CFL
	  <- can-fun-apply EL CFA.

%{ Congruence on letrec }%
tm-eq-letrec-cong : ({fb} {fbind: fb-bind fb (Defs fb)} tm-eq (B1 fb) (B2 fb)) ->
		      tm-eq (tm/letrec Defs B1) (tm/letrec Defs B2) -> type.
%mode tm-eq-letrec-cong +EQ -TEQLR.

- : tm-eq-letrec-cong ([fb] [fbind] tm-eq/refl) tm-eq/refl.



tm-eq-let-cong : tm-eq T1 T2
	       -> tm-eq (tm/let T1 B) (tm/let T2 B) -> type.
%mode +{A : tp} +{B : tp} +{T1 : tm A} +{T2 : tm A} +{B : reg A -> tm B}
      +{EQ1 : tm-eq T1 T2}
      -{LEQ : tm-eq (tm/let T1 B) (tm/let T2 B)}
      tm-eq-let-cong EQ1 LEQ.

- : tm-eq-let-cong tm-eq/refl tm-eq/refl.



%{ Determinism of the system }%
det : step T T1 -> step T T2 -> tm-eq T1 T2 -> type.
%mode det +S1 +S2 -EQ.

- : det (step/plus SP1) (step/plus SP2) tm-eq/refl.

- : det step/if-t step/if-t tm-eq/refl.

- : det step/if-f step/if-f tm-eq/refl.

- : det (step/let-a VP) (step/let-a VP1) tm-eq/refl.

- : det (step/let-s SP) (step/let-s SP1) Q
     <- det SP SP1 TEQ
     <- tm-eq-let-cong TEQ Q.

- : det (step/letrec-v VP) (step/letrec-v VP') tm-eq/refl.

- : det (step/letrec-s ([fb] [fbind] Run1 fb fbind))
        (step/letrec-s ([fb] [fbind] Run2 fb fbind)) Q
     <- ({fb : fbundle FTL}
	   {fbind : fb-bind fb (Defs fb)}
	   det (Run1 fb fbind) (Run2 fb fbind) (INEQ fb fbind))
     <- tm-eq-letrec-cong INEQ Q.


- : det (step/call FA1 FL1) (step/call FA2 FL2) Q
     <- fbundle-lookup-unique FL1 FL2 FBEQ
     <- function-apply-unique FBEQ FA1 FA2 Q.



%{ Blocks we need. The first one gives us the block we need in step relations }%
%block progress-1 : some {FTL : fun-tp-list} {Defs}
                    block {fb : fbundle FTL}
		          {bind : fb-bind fb (Defs fb)}
		          {map : fb-bind-map fb bind}.

%worlds (progress-1) (progress-letrec _ _)
                     (progress-let _ _)
                     (fb-bind-map _ _)
                     (progress _ _)
                     (can-fun-apply _ _) (can-fbundle-lookup _ _).

%worlds (det-1) (tm-eq-let-cong _ _)
                (tm-eq-letrec-cong _ _)
                (fbundle-lookup-unique _ _ _)
                (function-apply-unique _ _ _ _).

%worlds (det-1) (det _ _ _).

%{ Various obvious uniqueness lemmas }%
%unique fun-apply +FD +TL -1T.
%unique fb-bind +F -1B.
%unique fbundle-lookup +FB -1FDef.

%{ Progress totality }%
%total E (can-fun-apply E _).
%total PG (progress-letrec PG _).
%total PG (progress-let PG _).
%total E (fb-bind-map E _).
%total (T N) (can-fbundle-lookup N _) (progress T _).

%{ Determinism totality }%
%total FB (fbundle-lookup-unique FB _ _).
%total FB (function-apply-unique _ FB _ _).
%total T (tm-eq-let-cong T _).
%total FB (tm-eq-letrec-cong FB _).
%total S (det S _ _).


