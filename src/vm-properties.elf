%{

********* PROPERTIES *********

}%


%block det-1 : some {FTL} {Defs : pbundle FTL -> bb-def-list FTL}
	       block {pb : pbundle FTL} {bbind : bb-bind pb (Defs pb)}.

%worlds (det-1) (pbundle-lookup _ _) (bb-apply _ _ _) (bb-bind _ _).

%{

**** MAPS ****

}%

pb-bind-map : {PB : pbundle FTL} bb-bind PB Defs -> type.
%mode pb-bind-map +F -B.

%{ To appease Twelfs splitter }%
fb-bind-map0 : pb-bind-map pbundle0 bb-bind0.


bb-def-eq : bb-def FT -> bb-def FT -> type.

bb-def-eq/refl : bb-def-eq FD FD.

pbundle-lookup-unique : pbundle-lookup FB (bb-def-list/cons FD1 _)
		     -> pbundle-lookup FB (bb-def-list/cons FD2 _) -> bb-def-eq FD1 FD2 -> type.
%mode pbundle-lookup-unique +FB1 +FB2 -FDEF.

- : pbundle-lookup-unique FB1 FB2 bb-def-eq/refl.

insn-eq : insn T -> insn T -> type.

insn-eq/ : insn-eq I I.


function-apply-unique : bb-def-eq FD1 FD2 -> bb-apply FD1 TL E1 -> bb-apply FD2 TL E2
			 -> insn-eq E1 E2 -> type.
%mode function-apply-unique +EQ +FA1 +FA2 -TMEQ.

- : function-apply-unique bb-def-eq/refl bb-apply/body bb-apply/body insn-eq/.

- : function-apply-unique bb-def-eq/refl (bb-apply/phi FA1) (bb-apply/phi FA2) Q
     <- function-apply-unique bb-def-eq/refl FA1 FA2 Q.

%{ General relation capturing the basics of type progress }%

progress-good : insn T -> type.

progress-good/value : progress-good V
		       <- value V.

progress-good/step : progress-good E
		      <- step E E'.




can-pbundle-lookup : {FB : pbundle+ (bb-tp-list/cons FT FTL)}
		      pbundle-lookup FB FDL -> type.
%mode can-pbundle-lookup +FB -FL.

- : can-pbundle-lookup (f-tl/z FB) (pbundle-lookup/ctx-hit FBBind)
     <- pb-bind-map FB FBBind.

- : can-pbundle-lookup (f-tl/s FB) (pbundle-lookup/dig Q)
     <- can-pbundle-lookup FB Q.


can-bb-apply : {RL : reg-list TL} bb-apply Parms RL T -> type.
%mode +{T : tp} +{TL : tp-list} +{Parms}
      -{E : insn T}
      +{RL : reg-list TL}
      -{FA : bb-apply Parms RL E}
      can-bb-apply RL FA.

- : can-bb-apply reg-list/nil bb-apply/body.

- : can-bb-apply (reg-list/cons E EL) (bb-apply/phi Q)
     <- can-bb-apply EL Q.

%{ Effectiveness, step-op }%

can-step-op : {O : op T} step-op O V -> type.
%mode can-step-op +O -SOP.

- : can-step-op (op/reg R) step-op/reg.

- : can-step-op (op/plus _ _) (step-op/plus CNP)
     <- can-nat-plus _ _ CNP.

- : can-step-op (op/mone _ _) (step-op/mone CNM)
     <- can-nat-mone _ _ CNM.

- : can-step-op (op/cmp-lt _ _) (step-op/cmp-lt CLT)
     <- can-nat-lt _ _ CLT.




progress-letrec : ({F : pbundle FTL} {FB : bb-bind F (Defs F)}
		     progress-good (Body F))
		   -> progress-good (insn/letrec Defs ([fb] Body fb)) -> type.
%mode +{FTL} +{T} +{F : pbundle FTL}
      +{Body : pbundle FTL -> insn T}
      +{Defs : pbundle FTL -> bb-def-list FTL}
      +{PG : {F} {FB} progress-good (Body F)}
      -{PGG : progress-good (insn/letrec Defs Body)}
      progress-letrec PG PGG.

- : progress-letrec ([fb] [fbind] progress-good/value VP)
     (progress-good/step (step/letrec-v VP)).

- : progress-letrec ([fb] [fbind] progress-good/step (SP fb fbind))
     (progress-good/step (step/letrec-s ([fb] [fbind] SP fb fbind))).

progress-do : progress-good I1 -> progress-good (insn/do I1 B) -> type.
%mode +{T} +{T'}
      +{I1 : insn T'} +{B : (reg T' -> insn T)} +{PG : progress-good I1}
      -{PGG : progress-good (insn/do I1 B)}
      progress-do PG PGG.

- : progress-do (progress-good/value VP) (progress-good/step step/do-v).

- : progress-do (progress-good/step SP) (progress-good/step (step/do-s SP)).

%{

**** MAIN PROGRESS LEMMA ****

}%

progress : {E : insn T} progress-good E -> type.
%mode progress +E -PG.


-/return : progress (insn/return _) (progress-good/value value/return).

-/lr : progress (insn/letrec (Defs : pbundle FTL -> bb-def-list FTL) Body) Q
	<- ({fb : pbundle FTL} {fbind : bb-bind fb (Defs fb)}
	      pb-bind-map fb fbind ->
	        progress (Body fb) (PG fb fbind))
	<- progress-letrec PG Q.

-/br : progress (insn/br (f-hd FB) EL)
	    (progress-good/step (step/br CFA CFL))
	<- can-pbundle-lookup FB CFL
	<- can-bb-apply EL CFA.

-/brc-t : progress (insn/brc (reg/cst-b (s _)) _ _ _ _)
	   (progress-good/step step/brc-t).

-/brc-f : progress (insn/brc (reg/cst-b z) L1 R1 L2 R2)
	   (progress-good/step step/brc-f).

-/let : progress (insn/let Op _) (progress-good/step (step/let SOP))
	 <- can-step-op Op SOP.

-/do : progress (insn/do T1 B) Q
	<- progress T1 PG
	<- progress-do PG Q.



%{ Congruence on letrec }%
insn-eq-letrec-cong : ({fb} {fbind: bb-bind fb (Defs fb)} insn-eq (B1 fb) (B2 fb)) ->
		      insn-eq (insn/letrec Defs B1) (insn/letrec Defs B2) -> type.
%mode insn-eq-letrec-cong +EQ -TEQLR.

- : insn-eq-letrec-cong ([fb] [fbind] insn-eq/) insn-eq/.

op-eq : op A -> op A -> type.
op-eq/ : op-eq O O.
reg-eq : reg T -> reg T -> type.
reg-eq/ : reg-eq R R.

insn-eq-let-cong : {Bd : reg T -> insn T'} reg-eq R1 R2 -> insn-eq (Bd R1) (Bd R2) -> type.
%mode +{T : tp} +{T' : tp} +{R1 : reg T} +{R2 : reg T}
      +{Bd : reg T -> insn T'}
      +{EQ : reg-eq R1 R2}
      -{IEQ : insn-eq (Bd R1) (Bd R2)}
      insn-eq-let-cong Bd EQ IEQ.

- : insn-eq-let-cong Bd reg-eq/ insn-eq/.


insn-eq-do-cong : insn-eq T1 T2 -> insn-eq (insn/do T1 B) (insn/do T2 B) -> type.
%mode +{A : tp} +{B : tp} +{T1 : insn A} +{T2 : insn A} +{Bd : reg A -> insn B}
      +{EQ1 : insn-eq T1 T2}
      -{DEQ : insn-eq (insn/do T1 Bd) (insn/do T2 Bd)}
      insn-eq-do-cong EQ1 DEQ.

- : insn-eq-do-cong insn-eq/ insn-eq/.


det-op : step-op O R1 -> step-op O R2 -> reg-eq R1 R2 -> type.
%mode det-op +SOP1 +SOP -REQ.

- : det-op step-op/reg step-op/reg reg-eq/.
- : det-op (step-op/plus P1) (step-op/plus P2) reg-eq/.
- : det-op (step-op/mone M1) (step-op/mone M2) reg-eq/.
- : det-op (step-op/cmp-lt L1) (step-op/cmp-lt L2) reg-eq/.

%{ Determinism of the system }%
det : step T T1 -> step T T2 -> insn-eq T1 T2 -> type.
%mode det +S1 +S2 -EQ.

- : det ((step/let SOP1) : step (insn/let O B) (B R1)) (step/let SOP2) insn-eq/
     <- det-op SOP1 SOP2 REQ
     <- insn-eq-let-cong B REQ Q.

- : det (step/letrec-v VP) (step/letrec-v VP') insn-eq/.

- : det (step/letrec-s ([fb] [fbind] Run1 fb fbind))
        (step/letrec-s ([fb] [fbind] Run2 fb fbind)) Q
     <- ({fb : pbundle FTL}
	   {fbind : bb-bind fb (Defs fb)}
	   det (Run1 fb fbind) (Run2 fb fbind) (INEQ fb fbind))
     <- insn-eq-letrec-cong INEQ Q.

- : det step/brc-t step/brc-t insn-eq/.

- : det step/brc-f step/brc-f insn-eq/.

- : det (step/do-s SP1) (step/do-s SP2) Q
     <- det SP1 SP2 IEQ
     <- insn-eq-do-cong IEQ Q.

- : det step/do-v step/do-v insn-eq/.

- : det (step/br FA1 FL1) (step/br FA2 FL2) Q
     <- pbundle-lookup-unique FL1 FL2 FBEQ
     <- function-apply-unique FBEQ FA1 FA2 Q.

%{ Blocks we need. The first one gives us the block we need in step relations }%
%block progress-1 : some {FTL : bb-tp-list} {Defs}
                    block {fb : pbundle FTL}
		          {bind : bb-bind fb (Defs fb)}
		          {map : pb-bind-map fb bind}.

%worlds (progress-1) (progress-letrec _ _)
                     (progress-do _ _)
                     (pb-bind-map _ _)
                     (progress _ _)
                     (can-step-op _ _)
                     (can-bb-apply _ _) (can-pbundle-lookup _ _).

%worlds (det-1) (insn-eq-letrec-cong _ _)
                (insn-eq-do-cong _ _)
                (insn-eq-let-cong _ _ _)
                (det-op _ _ _)
                (pbundle-lookup-unique _ _ _)
                (function-apply-unique _ _ _ _).

%worlds (det-1) (det _ _ _).

%{ Various obvious uniqueness lemmas }%
%unique det-op +SOP1 +SOP2 -1REQ.
%unique bb-apply +FD +TL -1T.
%unique bb-bind +F -1B.
%unique pbundle-lookup +FB -1FDef.
%unique can-nat-plus +N1 +N2 -CNP.
%unique can-nat-mone +N1 +N2 -CNM.
%unique can-nat-lt +N1 +N2 -CLT.
%unique can-step-op +O -R.

%{ Progress totality }%
%total E (can-bb-apply E _).
%total O (can-step-op O _).
%total PG (progress-letrec PG _).
%total T  (progress-do T _).
%total E (pb-bind-map E _).
%total (T N) (can-pbundle-lookup N _) (progress T _).

%{ Determinism totality }%
%total FB (pbundle-lookup-unique FB _ _).
%total FB (function-apply-unique _ FB _ _).
%total T (insn-eq-let-cong T _ _).
%total IEQ (insn-eq-do-cong IEQ _).
%total FB (insn-eq-letrec-cong FB _).
%total S (det-op S _ _).
%total S (det S _ _).

