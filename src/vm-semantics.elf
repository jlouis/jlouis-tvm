%{

This is version (s z) of Mini-LLVM.

Jesper Louis Andersen, 2009

}%

%{

******** STATIC SEMANTICS ********

}%

value : insn T -> type.

value/return : value (insn/return _).



%{

******** DYNAMIC SEMANTICS *******

}%

bb-bind : pbundle FTL -> bb-def-list FTL -> type.
%mode bb-bind +PB -BBDef.

def-bind : defs -> type.
%mode def-bind +D.

%{ This is to work around a bug in Twelfs splitter }%
bb-bind0 : bb-bind pbundle0 bb-def-list/nil.

%{ When referring to an internal bb, ie a phi node, we use this
   relation to look up the relevant bb in the phi-bundle }%
pbundle-lookup : pbundle+ FTL -> bb-def-list FTL -> type.

pbundle-lookup/ctx-hit : pbundle-lookup (f-tl/z PB) FL
			  <- bb-bind PB FL.

pbundle-lookup/dig     : pbundle-lookup (f-tl/s PB) R
			  <- pbundle-lookup PB (bb-def-list/cons _ R).

bb-apply : bb-def (bb-tp/ TL T) -> reg-list TL -> insn T -> type.

bb-apply/body : bb-apply (bb-def/body E) reg-list/nil E.

bb-apply/phi  : bb-apply (bb-def/phi ([x] R x)) (reg-list/cons E EL) Q
		 <- bb-apply (R E) EL Q.


function-lookup : fun-id R TL -> defs -> fun-decl R TL -> type.

function-lookup/hit : function-lookup F (defs/s F FD R) FD.

function-lookup/miss : function-lookup (fun-id/ F) (defs/s (fun-id/ F') _ R) Q
			<- function-lookup (fun-id/ F) R Q.



function-apply : fun-decl R TL -> reg-list TL -> insn R -> type.

function-apply/body : function-apply (fun-decl/body BB) reg-list/nil BB.

function-apply/parm : function-apply (fun-decl/parm [r] FD r)
		                     (reg-list/cons R RL) Q
		       <- function-apply (FD R) RL Q.



step-op : op T -> reg T -> type.

step-op/reg : step-op (op/reg R) R.

step-op/plus : step-op (op/plus (reg/cst-n N1) (reg/cst-n N2)) (reg/cst-n N3)
		<- nat-plus N1 N2 N3.
step-op/mone : step-op (op/mone (reg/cst-n N1) (reg/cst-n N2)) (reg/cst-n N3)
		<- nat-mone N1 N2 N3.

step-op/cmp-lt : step-op (op/cmp-lt (reg/cst-n N1) (reg/cst-n N2)) (reg/cst-b B)
		  <- nat-lt N1 N2 B.

step : defs -> insn T -> insn T -> type.

step/let : step D (insn/let T B) (B V)
	    <- step-op T V.

step/letrec-v : step D (insn/letrec ([pb] Defs pb) ([pb] V)) V
		 <- value V.

step/letrec-s : step D (insn/letrec ([pb] Defs pb) ([pb] Body pb))
                     (insn/letrec ([pb] Defs pb) ([pb] Body' pb))
		 <- ({pb} bb-bind pb (Defs pb) ->
		         step D (Body pb) (Body' pb)).

step/brc-t : step D (insn/brc (reg/cst-b (s _)) L RL _ _) (insn/br L RL).

step/brc-f : step D (insn/brc (reg/cst-b z) _ _ L RL) (insn/br L RL).

step/do-s : step D (insn/do T B) (insn/do T' B)
	   <- step D T T'.

step/do-v : step D (insn/do (insn/return R) B) (B R).

step/br : step D (insn/br (f-hd PB) RL) E
	   <- pbundle-lookup PB (bb-def-list/cons BBDef _)
	   <- bb-apply BBDef RL E.

step/call : step Defs (insn/call Fun-id RL ([r] Body r))
	         (insn/do T ([r] Body r))
	     <- function-lookup Fun-id Defs FDecl
	     <- function-apply FDecl RL T.

step-pgm : pgm -> pgm -> type.

step-pgm/ : step-pgm (pgm/ D T) (pgm/ D T')
	     <- step D T T'.

%{

**** Iterated step relations ****

}%

steps : pgm -> pgm -> type.

steps/0 : steps P P.

steps/s : steps P P'
	   <- step-pgm P P''
	   <- steps P'' P'.

steps-to : pgm -> pgm -> type.

steps-to/ : steps-to (pgm/ D T) (pgm/ D V)
	     <- steps (pgm/ D T) (pgm/ D V)
	     <- value V.


