%% Various test functions for the VM
%% Jesper Louis Andersen, 2009


%{

The following encodes a slightly altered version of Appels
example in the [SSA is Functional Programming] paper. The
changes ensures there are no dead basic blocks and it fixes
a typo.

We also lowered to number of rounds on the while loop; it
proves no point to keep iterating but to stress Twelfs (prolog)
evaluator.

The code is transscribed from AppelTest.sml, an implementation
of the functional code in Standard ML.

}%

f1 = bb/def l_1 (body (let (constant 1)
			 ([i1] let (constant 1)
			    ([j1] (let (constant 0) [k1]
				     br l_2
				     (reg-list/cons i1
					(reg-list/cons j1
					   (reg-list/cons k1 reg-list/nil)))))))).

f2 = bb/def l_2 (phi [i2]
		   (phi [j2]
		      (phi [k2]
			 (body
			    (let (exp/lt k2 (reg/constant 10))
			       ([tmp]
				  brc tmp l_3 (reg-list/cons i2
						 (reg-list/cons j2
						    (reg-list/cons k2 reg-list/nil)))
				          l_4 (reg-list/cons i2
						 (reg-list/cons j2
						    (reg-list/cons k2 reg-list/nil))))))))).

f3 = bb/def l_3 (phi [i3]
		   (phi [j3]
		      (phi [k3]
			 (body
			    (let (exp/lt k3 (reg/constant 7))
			       ([tmp]
				  brc tmp l_5 (reg-list/cons i3
						 (reg-list/cons j3
						    (reg-list/cons k3 reg-list/nil)))
				          l_6 (reg-list/cons i3
						 (reg-list/cons j3
						    (reg-list/cons k3 reg-list/nil))))))))).

f4 = bb/def l_4 (phi [i4]
		   (phi [j4]
		      (phi [k4]
			 (body
			    (return j4))))).

f5 = bb/def l_5 (phi [i5]
		   (phi [j5]
		      (phi [k5]
			 (body
			    (let (exp/constant k5)
			       ([j8] let (exp/plus k5 (reg/constant 1))
				  ([k8] br l_7 (reg-list/cons i5
						  (reg-list/cons j8
						     (reg-list/cons k8 reg-list/nil)))))))))).

f6 = bb/def l_6 (phi [i6]
		   (phi [j6]
		      (phi [k6]
			 (body
			    (let (exp/constant k6)
			       ([j9] let (exp/plus k6 (reg/constant 2))
				  ([k9] br l_7 (reg-list/cons i6
						  (reg-list/cons j9
						     (reg-list/cons k9 reg-list/nil)))))))))).

f7 = bb/def l_7 (phi [i7]
		   (phi [j7]
		      (phi [k7]
			 (body
			    (br l_2 (reg-list/cons i7
				      (reg-list/cons j7
					 (reg-list/cons k7 reg-list/nil)))))))).

appel_test = function-body/def l_1 (bb-list/cons l_1 f1
				      (bb-list/cons l_2 f2
					 (bb-list/cons l_3 f3
					    (bb-list/cons l_4 f4
					       (bb-list/cons l_5 f5
						  (bb-list/cons l_6 f6
						     (bb-list/cons l_7 f7 bb-list/nil))))))).

%query 1 1 (function-body-apply reg-list/nil appel_test (return (reg/constant 9))).





