%% Various test functions for the VM
%% Jesper Louis Andersen, 2009


%{

The following encodes a slightly altered version of Appels
example in the [SSA is Functional Programming] paper. The
changes ensures there are no dead basic blocks and it fixes
a typo.

We also lowered to number of rounds on the while loop; it
proves no point to keep iterating but to stress Twelfs (prolog)
evaluator.

The code is transscribed from AppelTest.sml, an implementation
of the functional code in Standard ML.

}%

f1_body = (let (constant 1)
	     ([i1] let (constant 1)
		([j1] (let (constant 0) [k1]
			 br l_2
			 (reg-list/cons i1
			    (reg-list/cons j1
			       (reg-list/cons k1 reg-list/nil))))))).

f1 = bb/def l_1 (body f1_body).

f2 = bb/def l_2 (phi [i2]
		   (phi [j2]
		      (phi [k2]
			 (body
			    (let (exp/lt k2 (reg/constant 10))
			       ([tmp]
				  brc tmp l_3 (reg-list/cons i2
						 (reg-list/cons j2
						    (reg-list/cons k2 reg-list/nil)))
				          l_4 (reg-list/cons i2
						 (reg-list/cons j2
						    (reg-list/cons k2 reg-list/nil))))))))).

f3 = bb/def l_3 (phi [i3]
		   (phi [j3]
		      (phi [k3]
			 (body
			    (let (exp/lt j3 (reg/constant 7))
			       ([tmp]
				  brc tmp l_5 (reg-list/cons i3
						 (reg-list/cons j3
						    (reg-list/cons k3 reg-list/nil)))
				          l_6 (reg-list/cons i3
						 (reg-list/cons j3
						    (reg-list/cons k3 reg-list/nil))))))))).

f4 = bb/def l_4 (phi [i4]
		   (phi [j4]
		      (phi [k4]
			 (body
			    (return j4))))).



