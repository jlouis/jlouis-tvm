%{

  Extrinsic type system for the functions

}%

%{ Gamma is the typing environment }%
gamma : type.

gamma/z : gamma.
gamma/s : fun-id T TL -> gamma -> gamma.

gamma-lookup : gamma -> fun-id T TL -> type.
%mode gamma-lookup +G +F.

gamma-lookup/hit : gamma-lookup (gamma/s F _) F.

gamma-lookup/miss : gamma-lookup (gamma/s F' R) F
		     <- gamma-lookup R F.

%{ fun-id equality }%
fun-id-eq : fun-id T TL -> fun-id T TL -> bool -> type.
fun-id-eq/eq : fun-id-eq (fun-id/ N) (fun-id/ N') true
		 <- nat-eq N N'.
fun-id-eq/neq : fun-id-eq (fun-id/ N) (fun-id/ N') false
		 <- nat-neq N N'.

%{ It has the property that it can't be true and false at the same time }%
fun-id-eq-neq : fun-id-eq F1 F2 true -> fun-id-eq F1 F2 false -> void -> type.
%mode fun-id-eq-neq +T +F -V.

- : fun-id-eq-neq (fun-id-eq/eq EQ) (fun-id-eq/neq NEQ) V
     <- nat-eq-neq-void EQ NEQ V.

%worlds () (fun-id-eq-neq _ _ _).
%total FEQ (fun-id-eq-neq FEQ _ _).

%{ F \notin D -- says that F is not present as a function name in D }%
f-notin : fun-id T TL -> defs -> type.

f-notin/z : f-notin F defs/z.
f-notin/s : f-notin F1 (defs/s F2 _ R)
	     <- fun-id-eq F1 F2 false
	     <- f-notin F1 R.

%{ Wellformedness of terms [ G |- t ] }%
wf : gamma -> insn T -> type.

%{ Wellformedness of basic blocks [ G |- bb ] }%
wf-bb : gamma -> bb-def T -> type.

wf-bb/phi  : wf-bb G (bb-def/phi PHI)
	      <- ({r : cst T} wf-bb G (PHI r)).
wf-bb/body : wf-bb G (bb-def/body Insn)
	      <- wf G Insn.

%{ Wellformedness of pbundles [ G |- pb ] }%
wf-pb : gamma -> bb-def-list FTL -> type.

wf-pb/nil  : wf-pb G bb-def-list/nil.
wf-pb/cons : wf-pb G (bb-def-list/cons BBD R)
	      <- wf-bb G BBD
	      <- wf-pb G R.


wf/return : wf G (insn/return R).
wf/br     : wf G (insn/br _ _).
wf/brc    : wf G (insn/brc _ _ _ _ _).
wf/let    : wf G (insn/let Op Bdy)
	     <- ({r : cst T} wf G (Bdy r)).
wf/letrec : wf G (insn/letrec Defs Bdy)
	     <- ({pb : pbundle FTL} wf-pb G (Defs pb)
		   -> wf G (Bdy pb)).
wf/do     : wf G (insn/do I Bdy)
	     <- wf G I
	     <- ({r : cst T} wf G (Bdy r)).

wf/call   : wf G (insn/call F RL Bdy)
	     <- gamma-lookup G F
	     <- ({r} wf G (Bdy r)).

wf-decl : gamma -> fun-decl R TL -> type.

wf-decl/parm : wf-decl G (fun-decl/parm [r : cst T] FD r)
		<- ({r : cst T} wf-decl G (FD r)).

wf-decl/body : wf-decl G (fun-decl/body (I : insn Tp))
		<- wf G I.


%{ Wellformedness of definitions [ G |- D : G' ] }%
wf-defs : gamma -> defs -> gamma -> type.

wf-defs/z : wf-defs G defs/z gamma/z.

wf-defs/s : wf-defs G (defs/s F Decl DR) (gamma/s F GR)
	     <- wf-decl G Decl
	     <- f-notin F DR
	     <- wf-defs G DR GR.

wf-pgm : pgm -> type.

wf-pgm/ : wf-pgm (pgm/ D T)
	   <- wf G T
	   <- wf-defs G D G.
