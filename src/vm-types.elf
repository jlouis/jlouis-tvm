%{

  Extrinsic type system for the functions

}%

%{ Gamma is the typing environment }%
phi : type.

phi/z : phi.
phi/s : fun-id T TL -> phi -> phi.

phi-lookup : phi -> fun-id T TL -> type.
%mode phi-lookup +G +F.

phi-lookup/hit : phi-lookup (phi/s F _) F.

phi-lookup/miss : phi-lookup (phi/s F' R) F
		     <- phi-lookup R F.

%{ fun-id equality }%
fun-id-eq : fun-id T TL -> fun-id T TL -> bool -> type.
fun-id-eq/eq : fun-id-eq (fun-id/ N) (fun-id/ N') true
		 <- nat-eq N N'.
fun-id-eq/neq : fun-id-eq (fun-id/ N) (fun-id/ N') false
		 <- nat-neq N N'.

%{ It has the property that it can't be true and false at the same time }%
fun-id-eq-neq : fun-id-eq F1 F2 true -> fun-id-eq F1 F2 false -> void -> type.
%mode fun-id-eq-neq +T +F -V.

- : fun-id-eq-neq (fun-id-eq/eq EQ) (fun-id-eq/neq NEQ) V
     <- nat-eq-neq-void EQ NEQ V.

%worlds () (fun-id-eq-neq _ _ _).
%total FEQ (fun-id-eq-neq FEQ _ _).

%{ F \notin D -- says that F is not present as a function name in D }%
f-notin : fun-id T TL -> defs -> type.

f-notin/z : f-notin F defs/z.
f-notin/s : f-notin F1 (defs/s F2 _ R)
	     <- fun-id-eq F1 F2 false
	     <- f-notin F1 R.

%{ Wellformedness of terms [ P |- t ] }%
wf : phi -> insn T -> type.

%{ Wellformedness of basic blocks [ P |- bb ] }%
wf-bb : phi -> bb-def T -> type.

wf-bb/phi  : wf-bb P (bb-def/phi PHI)
	      <- ({r : cst T} wf-bb P (PHI r)).
wf-bb/body : wf-bb P (bb-def/body Insn)
	      <- wf P Insn.

%{ Wellformedness of pbundles [ P |- pb ] }%
wf-pb : phi -> bb-def-list FTL -> type.

wf-pb/nil  : wf-pb P bb-def-list/nil.
wf-pb/cons : wf-pb P (bb-def-list/cons BBD R)
	      <- wf-bb P BBD
	      <- wf-pb P R.


wf/return : wf P (insn/return R).
wf/br     : wf P (insn/br _ _).
wf/brc    : wf P (insn/brc _ _ _ _ _).
wf/let    : wf P (insn/let Op Bdy)
	     <- ({r : cst T} wf P (Bdy r)).
wf/letrec : wf P (insn/letrec Defs Bdy)
	     <- ({pb : pbundle FTL} wf-pb P (Defs pb)
		   -> wf P (Bdy pb)).
wf/do     : wf P (insn/do I Bdy)
	     <- wf P I
	     <- ({r : cst T} wf P (Bdy r)).

wf/call   : wf P (insn/call F RL Bdy)
	     <- phi-lookup P F
	     <- ({r} wf P (Bdy r)).

wf-decl : phi -> fun-decl R TL -> type.

wf-decl/parm : wf-decl P (fun-decl/parm [r : cst T] FD r)
		<- ({r : cst T} wf-decl P (FD r)).

wf-decl/body : wf-decl P (fun-decl/body (I : insn Tp))
		<- wf P I.


%{ Wellformedness of definitions [ P |- D : G' ] }%
wf-defs : phi -> defs -> phi -> type.

wf-defs/z : wf-defs P defs/z phi/z.

wf-defs/s : wf-defs P (defs/s F Decl DR) (phi/s F GR)
	     <- wf-decl P Decl
	     <- f-notin F DR
	     <- wf-defs P DR GR.

wf-pgm : pgm -> type.

wf-pgm/ : wf-pgm (pgm/ D T)
	   <- wf P T
	   <- wf-defs P D P.
